{
  "openapi": "3.1.0",
  "info": {
    "title": "Kambrium Management API",
    "description": "API for managing MCP server connections and integrations",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.kambrium.com",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/v1/mcp-servers/available": {
      "get": {
        "summary": "Get Available MCP Servers",
        "description": "Get a simplified list of all available MCP server integrations that can be connected to",
        "responses": {
          "200": {
            "description": "Available MCP server integrations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableServersResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/mcp-servers": {
      "get": {
        "summary": "List User's MCP Server Connections",
        "description": "Get all MCP server connections for the authenticated user",
        "responses": {
          "200": {
            "description": "User's MCP server connections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create MCP Server Instance",
        "description": "Create a new connection to an MCP server integration. Supports both API key and OAuth authentication methods",
        "requestBody": {
          "description": "MCP server connection details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConnectionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "MCP server connection created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/mcp-servers/{server_id}": {
      "get": {
        "summary": "Get MCP Server Instance",
        "description": "Get detailed information about a specific MCP server connection",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "description": "ID of the MCP server connection",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MCP server connection details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionDetailResponse"
                }
              }
            }
          },
          "404": {
            "description": "MCP server connection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update MCP Server Instance",
        "description": "Update an existing MCP server connection",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "description": "ID of the MCP server connection to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Updated connection details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConnectionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "MCP server connection updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "MCP server connection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete MCP Server Instance",
        "description": "Delete an MCP server connection",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "description": "ID of the MCP server connection to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MCP server connection deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "404": {
            "description": "MCP server connection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/mcp-servers/{server_id}/tools": {
      "get": {
        "summary": "Get MCP Server Tools",
        "description": "Retrieve all available tools for a specific MCP server connection in MCP format with automatic pagination for large tool collections",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "description": "ID of the MCP server connection",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of tools to return (1-2000, default: 50)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 2000,
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of tools to skip for pagination (default: 0)",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MCP server tools with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolsResponse"
                }
              }
            }
          },
          "404": {
            "description": "MCP server connection not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/mcp/tools/list": {
      "post": {
        "summary": "List Tools",
        "description": "List all available tools for the MCP server using JSON-RPC 2.0 protocol",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Tenant identifier (e.g., 'pipedrive', 'salesforce', 'hubspot')",
            "required": true,
            "schema": {
              "type": "string",
              "example": "pipedrive"
            }
          }
        ],
        "requestBody": {
          "description": "JSON-RPC 2.0 request for listing tools",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/McpListToolsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of available tools",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/McpListToolsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/McpError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/mcp/tools/call": {
      "post": {
        "summary": "Call Tool",
        "description": "Execute a specific tool with provided arguments using JSON-RPC 2.0 protocol",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Tenant identifier (e.g., 'pipedrive', 'salesforce', 'hubspot')",
            "required": true,
            "schema": {
              "type": "string",
              "example": "pipedrive"
            }
          }
        ],
        "requestBody": {
          "description": "JSON-RPC 2.0 request for calling a tool",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/McpCallToolRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Tool execution result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/McpCallToolResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/McpError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/mcp/resources/list": {
      "post": {
        "summary": "Get Resources",
        "description": "List all available resources for the MCP server using JSON-RPC 2.0 protocol",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Tenant identifier (e.g., 'pipedrive', 'salesforce', 'hubspot')",
            "required": true,
            "schema": {
              "type": "string",
              "example": "pipedrive"
            }
          }
        ],
        "requestBody": {
          "description": "JSON-RPC 2.0 request for listing resources",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/McpListResourcesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of available resources",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/McpListResourcesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/McpError"
                }
              }
            }
          }
        }
      }
    },
    "/{tenant}/mcp/prompts/list": {
      "post": {
        "summary": "Get Prompts",
        "description": "List all available prompts for the MCP server using JSON-RPC 2.0 protocol",
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "description": "Tenant identifier (e.g., 'pipedrive', 'salesforce', 'hubspot')",
            "required": true,
            "schema": {
              "type": "string",
              "example": "pipedrive"
            }
          }
        ],
        "requestBody": {
          "description": "JSON-RPC 2.0 request for listing prompts",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/McpListPromptsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of available prompts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/McpListPromptsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/McpError"
                }
              }
            }
          }
        }
      }
    },
    "/plants": {
      "get": {
        "description": "Returns all plants from the system that the user has access to",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plant response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plant"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlantError"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new plant in the store",
        "requestBody": {
          "description": "Plant to add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "plant response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plant"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlantError"
                }
              }
            }
          }
        }
      }
    },
    "/plants/{id}": {
      "delete": {
        "description": "Deletes a single plant based on the ID supplied",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of plant to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plant deleted",
            "content": {}
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlantError"
                }
              }
            }
          }
        }
      }
    }
  },
  "webhooks": {
    "/plant/webhook": {
      "post": {
        "description": "Information about a new plant added to the store",
        "requestBody": {
          "description": "Plant added to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "AvailableServersResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableServer"
            }
          },
          "message": {
            "type": "string",
            "example": "Found 2 available MCP server integrations"
          }
        },
        "required": [
          "success",
          "data",
          "message"
        ]
      },
      "AvailableServer": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "pipedrive"
          },
          "description": {
            "type": "string",
            "example": "CRM integration for managing deals, contacts, and activities"
          },
          "number_of_tools": {
            "type": "integer",
            "example": 277
          }
        },
        "required": [
          "name",
          "description",
          "number_of_tools"
        ]
      },
      "ConnectionsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connection"
            }
          },
          "message": {
            "type": "string",
            "example": "Found 1 MCP server connections"
          }
        },
        "required": [
          "success",
          "data",
          "message"
        ]
      },
      "Connection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 172
          },
          "mcp_server_id": {
            "type": "integer",
            "example": 1
          },
          "mcp_server_name": {
            "type": "string",
            "example": "Pipedrive MCP Server"
          },
          "mcp_server_description": {
            "type": "string",
            "example": "CRM integration for managing deals, contacts, and activities"
          },
          "company_name": {
            "type": "string",
            "example": "Acme Corp"
          },
          "api_key_verification_status": {
            "type": "string",
            "enum": [
              "pending",
              "verified",
              "failed"
            ],
            "example": "verified"
          },
          "oauth2_client_id": {
            "type": "string",
            "example": "3qonqss9be528iitnmsd58tmac"
          },
          "oauth2_scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "default-m2m-resource-server-z958ha/mcp.read",
              "default-m2m-resource-server-z958ha/mcp.write"
            ]
          },
          "mcp_server_access_type_name": {
            "type": "string",
            "example": "Write Access"
          },
          "mcp_server_access_status_name": {
            "type": "string",
            "example": "Active"
          },
          "agent_enabled": {
            "type": "boolean",
            "example": true
          },
          "agent_permission_type_name": {
            "type": "string",
            "example": "Full Access"
          },
          "disabled_tools": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": []
          },
          "last_used": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-20T14:22:00Z"
          },
          "usage_count": {
            "type": "integer",
            "example": 45
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2024-01-15T10:30:00Z"
          },
          "auth_method": {
            "type": "string",
            "enum": [
              "api_key",
              "oauth"
            ],
            "example": "api_key"
          },
          "authorization_url": {
            "type": "string",
            "nullable": true,
            "example": null
          },
          "oauth_status": {
            "type": "string",
            "nullable": true,
            "enum": [
              "pending",
              "active",
              "failed"
            ],
            "example": null
          },
          "oauth2_credentials": {
            "type": "object",
            "nullable": true,
            "properties": {
              "client_id": {
                "type": "string"
              },
              "client_secret": {
                "type": "string"
              }
            },
            "example": null
          }
        },
        "required": [
          "id",
          "mcp_server_id",
          "mcp_server_name",
          "api_key_verification_status",
          "oauth2_client_id",
          "oauth2_scopes",
          "mcp_server_access_type_name",
          "mcp_server_access_status_name",
          "agent_enabled",
          "disabled_tools",
          "created_at"
        ]
      },
      "CreateConnectionRequest": {
        "type": "object",
        "required": [
          "mcp_server",
          "access_type"
        ],
        "properties": {
          "mcp_server": {
            "type": "string",
            "example": "pipedrive",
            "description": "MCP server integration name (e.g., 'pipedrive', 'salesforce')"
          },
          "access_type": {
            "type": "string",
            "enum": [
              "read",
              "write",
              "individual"
            ],
            "example": "write",
            "description": "Access level for the connection"
          },
          "auth_method": {
            "type": "string",
            "enum": [
              "api_key",
              "oauth"
            ],
            "default": "api_key",
            "example": "api_key",
            "description": "SaaS authentication method (defaults to 'api_key' for backward compatibility)"
          },
          "api_key": {
            "type": "string",
            "example": "your-pipedrive-api-key",
            "description": "Required when auth_method is 'api_key'"
          },
          "agent_enabled": {
            "type": "boolean",
            "default": true,
            "example": true,
            "description": "Enable agent access to this connection"
          },
          "mcp_server_authentication_method": {
            "type": "string",
            "enum": [
              "oauth",
              "bearer_token"
            ],
            "default": "oauth",
            "example": "oauth",
            "description": "MCP server access method"
          },
          "disabled_tools": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "nullable": true,
            "example": null,
            "description": "Tool IDs to disable (only when access_type is 'individual')"
          }
        }
      },
      "UpdateConnectionRequest": {
        "type": "object",
        "properties": {
          "api_key": {
            "type": "string",
            "example": "updated-api-key",
            "description": "Updated API key for the connection"
          },
          "agent_enabled": {
            "type": "boolean",
            "example": false,
            "description": "Enable or disable agent access"
          },
          "access_type": {
            "type": "string",
            "enum": [
              "read",
              "write",
              "individual"
            ],
            "example": "read",
            "description": "Updated access level"
          },
          "disabled_tools": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [
              1,
              2,
              3
            ],
            "description": "Tool IDs to disable (for individual access)"
          }
        }
      },
      "ConnectionResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/Connection"
          },
          "message": {
            "type": "string",
            "example": "MCP server connection created successfully"
          }
        },
        "required": [
          "success",
          "data",
          "message"
        ]
      },
      "ConnectionDetailResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/Connection"
          },
          "message": {
            "type": "string",
            "example": "MCP server details retrieved successfully"
          }
        },
        "required": [
          "success",
          "data",
          "message"
        ]
      },
      "DeleteResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "null",
            "example": null
          },
          "message": {
            "type": "string",
            "example": "MCP server connection deleted successfully"
          }
        },
        "required": [
          "success",
          "data",
          "message"
        ]
      },
      "ToolsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "$ref": "#/components/schemas/ToolsData"
          },
          "message": {
            "type": "string",
            "example": "Found 277 tools for MCP server connection (showing 50 tools, page 1)"
          }
        },
        "required": [
          "success",
          "data",
          "message"
        ]
      },
      "ToolsData": {
        "type": "object",
        "properties": {
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tool"
            },
            "description": "Array of MCP-compliant tools"
          },
          "total_count": {
            "type": "integer",
            "example": 277,
            "description": "Total number of tools available"
          },
          "mcp_server_id": {
            "type": "integer",
            "example": 1,
            "description": "ID of the MCP server"
          },
          "limit": {
            "type": "integer",
            "example": 50,
            "description": "Maximum tools returned in this response"
          },
          "offset": {
            "type": "integer",
            "example": 0,
            "description": "Number of tools skipped"
          },
          "has_more": {
            "type": "boolean",
            "example": true,
            "description": "Whether more tools are available"
          }
        },
        "required": [
          "tools",
          "total_count",
          "mcp_server_id",
          "limit",
          "offset",
          "has_more"
        ]
      },
      "Tool": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "getPersons",
            "description": "Tool name (MCP compliant)"
          },
          "description": {
            "type": "string",
            "example": "Returns all persons from the CRM system",
            "description": "Tool description (MCP compliant)"
          },
          "inputSchema": {
            "type": "object",
            "description": "JSON Schema for tool input (MCP compliant)",
            "example": {
              "type": "object",
              "title": "GetPersons Input",
              "description": "Input schema for getPersons endpoint",
              "properties": {
                "limit": {
                  "type": "string",
                  "title": "Limit",
                  "description": "Items shown per page"
                }
              },
              "required": [],
              "additionalProperties": false
            }
          },
          "annotations": {
            "type": "object",
            "description": "Additional metadata (MCP compliant)",
            "example": {}
          }
        },
        "required": [
          "name",
          "description",
          "inputSchema",
          "annotations"
        ]
      },
      "McpListToolsRequest": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "enum": [
              "2.0"
            ],
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": "tools-1"
          },
          "method": {
            "type": "string",
            "enum": [
              "tools/list"
            ],
            "example": "tools/list"
          },
          "params": {
            "type": "object",
            "properties": {
              "cursor": {
                "type": "string",
                "description": "Optional pagination cursor"
              }
            }
          }
        },
        "required": [
          "jsonrpc",
          "id",
          "method"
        ]
      },
      "McpListToolsResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "enum": [
              "2.0"
            ],
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": "tools-1"
          },
          "result": {
            "type": "object",
            "properties": {
              "tools": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/McpTool"
                }
              },
              "nextCursor": {
                "type": "string",
                "description": "Pagination cursor for next page"
              }
            },
            "required": [
              "tools"
            ]
          }
        },
        "required": [
          "jsonrpc",
          "id",
          "result"
        ]
      },
      "McpTool": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "get_deals"
          },
          "description": {
            "type": "string",
            "example": "Retrieve deals from Pipedrive CRM with filtering options"
          },
          "inputSchema": {
            "type": "object",
            "example": {
              "type": "object",
              "properties": {
                "limit": {
                  "type": "integer",
                  "description": "Maximum number of deals to return (1-500)",
                  "minimum": 1,
                  "maximum": 500,
                  "default": 100
                },
                "status": {
                  "type": "string",
                  "description": "Deal status filter",
                  "enum": [
                    "open",
                    "won",
                    "lost",
                    "deleted",
                    "all_not_deleted"
                  ],
                  "default": "all_not_deleted"
                }
              },
              "required": [
                "limit"
              ]
            }
          }
        },
        "required": [
          "name",
          "description",
          "inputSchema"
        ]
      },
      "McpCallToolRequest": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "enum": [
              "2.0"
            ],
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": "call-1"
          },
          "method": {
            "type": "string",
            "enum": [
              "tools/call"
            ],
            "example": "tools/call"
          },
          "params": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "get_deals"
              },
              "arguments": {
                "type": "object",
                "example": {
                  "limit": 5,
                  "status": "open",
                  "sort": "value DESC"
                }
              }
            },
            "required": [
              "name"
            ]
          }
        },
        "required": [
          "jsonrpc",
          "id",
          "method",
          "params"
        ]
      },
      "McpCallToolResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "enum": [
              "2.0"
            ],
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": "call-1"
          },
          "result": {
            "type": "object",
            "properties": {
              "content": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "text"
                      ]
                    },
                    "text": {
                      "type": "string"
                    }
                  }
                }
              },
              "isError": {
                "type": "boolean",
                "example": false
              }
            },
            "required": [
              "content",
              "isError"
            ]
          }
        },
        "required": [
          "jsonrpc",
          "id",
          "result"
        ]
      },
      "McpListResourcesRequest": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "enum": [
              "2.0"
            ],
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": "res-1"
          },
          "method": {
            "type": "string",
            "enum": [
              "resources/list"
            ],
            "example": "resources/list"
          },
          "params": {
            "type": "object",
            "properties": {
              "cursor": {
                "type": "string",
                "description": "Optional pagination cursor"
              }
            }
          }
        },
        "required": [
          "jsonrpc",
          "id",
          "method"
        ]
      },
      "McpListResourcesResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "enum": [
              "2.0"
            ],
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": "res-1"
          },
          "result": {
            "type": "object",
            "properties": {
              "resources": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/McpResource"
                }
              },
              "nextCursor": {
                "type": "string",
                "description": "Pagination cursor for next page"
              }
            },
            "required": [
              "resources"
            ]
          }
        },
        "required": [
          "jsonrpc",
          "id",
          "result"
        ]
      },
      "McpResource": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "example": "pipedrive://deals/schema"
          },
          "name": {
            "type": "string",
            "example": "Deals Schema"
          },
          "description": {
            "type": "string",
            "example": "Complete schema definition for Pipedrive deals including all fields and their types"
          },
          "mimeType": {
            "type": "string",
            "example": "application/json"
          }
        },
        "required": [
          "uri",
          "name",
          "description",
          "mimeType"
        ]
      },
      "McpListPromptsRequest": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "enum": [
              "2.0"
            ],
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": "prompts-1"
          },
          "method": {
            "type": "string",
            "enum": [
              "prompts/list"
            ],
            "example": "prompts/list"
          },
          "params": {
            "type": "object",
            "properties": {
              "cursor": {
                "type": "string",
                "description": "Optional pagination cursor"
              }
            }
          }
        },
        "required": [
          "jsonrpc",
          "id",
          "method"
        ]
      },
      "McpListPromptsResponse": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "enum": [
              "2.0"
            ],
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": "prompts-1"
          },
          "result": {
            "type": "object",
            "properties": {
              "prompts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/McpPrompt"
                }
              },
              "nextCursor": {
                "type": "string",
                "description": "Pagination cursor for next page"
              }
            },
            "required": [
              "prompts"
            ]
          }
        },
        "required": [
          "jsonrpc",
          "id",
          "result"
        ]
      },
      "McpPrompt": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "deal_analysis"
          },
          "description": {
            "type": "string",
            "example": "Analyze a specific deal and provide actionable insights"
          },
          "arguments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "required": {
                  "type": "boolean"
                }
              }
            },
            "example": [
              {
                "name": "deal_id",
                "description": "The ID of the deal to analyze",
                "required": true
              },
              {
                "name": "include_history",
                "description": "Whether to include deal history and activity timeline",
                "required": false
              }
            ]
          }
        },
        "required": [
          "name",
          "description",
          "arguments"
        ]
      },
      "McpError": {
        "type": "object",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "enum": [
              "2.0"
            ],
            "example": "2.0"
          },
          "id": {
            "type": "string",
            "example": "call-1"
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "example": -32000
              },
              "message": {
                "type": "string",
                "example": "Invalid or expired OAuth token"
              },
              "data": {
                "type": "object"
              }
            },
            "required": [
              "code",
              "message"
            ]
          }
        },
        "required": [
          "jsonrpc",
          "id",
          "error"
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "example": "UNAUTHORIZED"
              },
              "message": {
                "type": "string",
                "example": "Invalid or expired access token"
              },
              "details": {
                "type": "object",
                "example": {}
              }
            },
            "required": [
              "code",
              "message"
            ]
          }
        },
        "required": [
          "success",
          "error"
        ]
      },
      "Plant": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the plant",
            "type": "string"
          },
          "tag": {
            "description": "Tag to specify the type",
            "type": "string"
          }
        }
      },
      "NewPlant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Plant"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "description": "Identification number of the plant",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "PlantError": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  }
}